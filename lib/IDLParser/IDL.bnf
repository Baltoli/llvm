# ::= <specification>

specification ::= Constraint <s> <@constraint> End

@constraint ::= <@nested> | <conjunction> | <disjunction>
              | <rename> | <if> | <default> | <collect>
              | <ConstraintOpcode> | <GeneralizedDominance>
              | <atom> | <GeneralizedSame> | <ConstraintBlock>

@nested ::= '(' <@constraint> ')'

conjunction ::= '(' <@constraint> and <@constraint>
                                { and <@constraint> } ')'

disjunction ::= '(' <@constraint> or <@constraint>
                                { or <@constraint> } ')'

rename ::= ( <inheritance> | <forone> | <forall> | <forsome> )
           [ with <@slot> as <@slot>
           {  and <@slot> as <@slot> } ] [ at <@slot> ]

inheritance ::= inherits <s> [ '(' <s> '=' <@calculation>
                             { ',' <s> '=' <@calculation> } ')' ]

forone ::= <@constraint> for <s> '=' <@calculation>

forall ::= <@constraint> for all <s> '=' <@calculation>
                                    '..' <@calculation>

forsome ::= <@constraint> for some <s> '=' <@calculation>
                                      '..' <@calculation>

if ::= if <@calculation> '=' <@calculation>
     then <@constraint> else <@constraint> endif

default ::= <@constraint> for <s> '=' <@calculation>
            if not otherwise specified

collect ::= collect <s> <n> <@constraint>

atom ::= <ConstraintIntegerType>   | <ConstraintFloatType>
       | <ConstraintVectorType>    | <ConstraintPointerType>
       | <ConstraintUnused>        | <ConstraintNotNumericConstant>
       | <ConstraintIntZero>       | <ConstraintFloatZero>
       | <ConstraintConstant>      | <ConstraintPreexecution>
       | <ConstraintArgument>      | <ConstraintInstruction>
       | <ConstraintSame>          | <ConstraintDistinct>
       | <ConstraintDFGEdge>       | <ConstraintCFGEdge>
       | <ConstraintCDGEdge>       | <ConstraintPDGEdge>
       | <ConstraintFirstOperand>  | <ConstraintSecondOperand>
       | <ConstraintThirdOperand>  | <ConstraintFourthOperand>
       | <ConstraintFirstSuccessor> | <ConstraintSecondSuccessor>
       | <ConstraintThirdSuccessor> | <ConstraintFourthSuccessor>
       | <ConstraintCFGDominate>   | <ConstraintCFGDominateStrict>
       | <ConstraintCFGPostdom>    | <ConstraintCFGPostdomStrict>
       | <ConstraintIncomingValue> | <ConstraintDFGBlocked>
       | <ConstraintCFGBlocked>    | <ConstraintPDGBlocked>
       | <ConstraintFunctionAttribute>

ConstraintIntegerType ::= <@slot> is an integer
ConstraintFloatType   ::= <@slot> is a float
ConstraintVectorType  ::= <@slot> is a vector
ConstraintPointerType ::= <@slot> is a pointer

ConstraintUnused ::= <@slot> is unused
ConstraintOpcode ::= <@slot> is <s> instruction

ConstraintIntZero   ::= <@slot> is integer zero
ConstraintFloatZero ::= <@slot> is floating point zero

ConstraintNotNumericConstant ::= <@slot> is not a numeric constant
ConstraintConstant           ::= <@slot> is a constant
ConstraintPreexecution       ::= <@slot> is preexecution
ConstraintArgument           ::= <@slot> is an argument
ConstraintInstruction        ::= <@slot> is instruction

ConstraintSame     ::= <@slot> is the same as <@slot>
ConstraintDistinct ::= <@slot> is not the same as <@slot>
ConstraintBlock    ::= <@slot> spans block to <@slot>

ConstraintDFGEdge ::= <@slot> has data flow to <@slot>
ConstraintCFGEdge ::= <@slot> has control flow to <@slot>
ConstraintCDGEdge ::= <@slot> has control dominance to <@slot>
ConstraintPDGEdge ::= <@slot> has dependence edge to <@slot>

ConstraintFirstOperand  ::= <@slot> is first argument of <@slot>
ConstraintSecondOperand ::= <@slot> is second argument of <@slot>
ConstraintThirdOperand  ::= <@slot> is third argument of <@slot>
ConstraintFourthOperand ::= <@slot> is fourth argument of <@slot>

ConstraintFirstSuccessor  ::= <@slot> is first successor of <@slot>
ConstraintSecondSuccessor ::= <@slot> is second successor of <@slot>
ConstraintThirdSuccessor  ::= <@slot> is third successor of <@slot>
ConstraintFourthSuccessor ::= <@slot> is fourth successor of <@slot>

ConstraintCFGDominate       ::= <@slot> control flow
                                dominates <@slot>
ConstraintCFGPostdom        ::= <@slot> control flow
                                post dominates <@slot>
ConstraintCFGDominateStrict ::= <@slot> strictly control flow
                                dominates <@slot>
ConstraintCFGPostdomStrict  ::= <@slot> strictly control flow
                                post dominates <@slot>

ConstraintIncomingValue ::= <@slot> reaches phi node
                            <@slot> from <@slot>

ConstraintDFGBlocked ::= all data flow from <@slot> to <@slot>
                                        passes through <@slot>

ConstraintCFGBlocked ::= all control flow from <@slot> to <@slot>
                                           passes through <@slot>

ConstraintPDGBlocked ::= all flow from <@slot> to <@slot>
                                   passes through <@slot>

ConstraintFunctionAttribute ::= <@slot> has attribute pure

GeneralizedSame  ::= <@slot> is the same set as <@slot>

GeneralizedDominance ::= all flow from <@slot> or any origin
                         to any of <@slot> passes through
                         at least one of <@slot>

@slot ::= <slottuple> | '{' <@openslot> '}'

slottuple ::= '{' <@openslot> ',' <@openslot>
                            { ',' <@openslot> } '}'

@openslot ::= <slotmember> | <slotindex> | <slotrange>
            | <slottuple>  | <slotbase>

slotmember ::= <@openslot> '.' <s>

slotindex ::= <@openslot> '[' <@calculation> ']'

slotrange ::= <@openslot> '[' <@calculation>
                         '..' <@calculation> ']'

slotbase ::= <s>

@calculation ::= <addvar>   | <addconst> | <subvar>
               | <subconst> | <basevar>  | <baseconst>

addvar ::= <@calculation> '+' <s>

addconst ::= <@calculation> '+' <n>

subvar ::= <@calculation> '-' <s>

subconst ::= <@calculation> '-' <n>

basevar ::= <s>

baseconst ::= <n>
