# These are the toplevel constraint specifications.

Constraint VectorAdd
( inherits For and
  inherits VectorStore
      with {begin} as {begin}
       and {iterator} as {idx} at {output} and
  {output.value} is first argument of {output.store} and
  {output.value} is fadd instruction and
  inherits VectorRead
      with {begin} as {begin}
       and {iterator} as {idx} at {input1} and
  inherits VectorRead
      with {begin} as {begin}
       and {iterator} as {idx} at {input2} and
  {scale} is fmul instruction and
  inherits ArgumentsPermuted with {scale} as {dst}
                              and {input2.value} as {src1}
                              and {alpha} as {src2} and
  inherits ArgumentsPermuted with {output.value} as {dst}
                              and {input1.value} as {src1}
                              and {scale} as {src2} and
  {precursor} has control flow to {begin} and
  {precursor} control flow dominates {begin})
End

Constraint VectorDot
( inherits For and
  inherits VectorRead
      with {begin} as {begin}
       and {iterator} as {idx} at {input1} and
  inherits VectorRead
      with {begin} as {begin}
       and {iterator} as {idx} at {input2} and
  inherits GeneralDotProduct
      with {input1.value} as {src1}
       and {input2.value} as {src2} and
  {input1.value} is first argument of {dotvalue} and
  {input2.value} is second argument of {dotvalue} and
  {precursor} has control flow to {begin} and
  {precursor} control flow dominates {begin})
End

Constraint GEMM 
( inherits ForNest(N=3) and
  inherits MatrixStore
      with {iterator[0]} as {col}
       and {iterator[1]} as {row}
       and {begin} as {begin} at {output} and
  inherits MatrixRead
      with {iterator[0]} as {col}
       and {iterator[2]} as {row}
       and {begin} as {begin} at {input1} and
  inherits MatrixRead
      with {iterator[1]} as {col}
       and {iterator[2]} as {row}
       and {begin} as {begin} at {input2} and
  inherits DotProductLoop
      with {for[2]}         as {loop}
       and {input1.value}   as {src1}
       and {input2.value}   as {src2}
       and {output.address} as {update_address})
End

Constraint SPMV_CSR
( inherits SPMV_BASE and
  {matrix_read.idx} is the same as {inner.iterator} and
  {vector_read.idx} is the same as {index_read.value} and
  {index_read.idx}  is the same as {inner.iterator} and
  {output.idx}      is the same as {iterator} and
  inherits ReadRange
      with {iterator} as {idx}
       and {inner.iter_begin} as {range_begin}
       and {inner.iter_end}   as {range_end})
End

Constraint SPMV_JDS
( inherits SPMV_BASE and
  {matrix_read.idx} is the same as {j} and
  {vector_read.idx} is the same as {index_read.value} and
  {index_read.idx}  is the same as {j} and
  {output.idx}      is the same as {perm_read.value} and
  inherits VectorRead
      with {iterator} as {idx}
       and {begin} as {begin} at {perm_read} and
  {inner.iter_begin} is integer zero and
  inherits VectorRead
      with {iterator} as {idx}
       and {begin} as {begin} 
       and {inner.iter_end} as {value} at {nonzeroes_read} and
  inherits VectorRead
      with {inner.iterator} as {idx}
       and {begin} as {begin} 
       and {col_begin} as {value} at {col_begin_read} and
  inherits Addition
      with {j} as {value}
       and {col_begin} as {input}
       and {iterator} as {addend})
End

Constraint SPMV_BASE
( inherits For and
  inherits For at {inner} and
  {loop.begin} spans block to {blockend} and
  ( {blockend} is the same as {inner.begin} or
    ( {blockend} has control flow to {inner.begin} and
      {blockend} control flow dominates {inner.begin} and 
      {inner.begin} strictly control flow post dominates {blockend})) and
  {inner.successor} spans block to {loop.end} and
  inherits DotProductLoop
      with {inner}             as {loop}
       and {matrix_read.value} as {src1}
       and {vector_read.value} as {src2}
       and {output.address} as {update_address} and
  inherits VectorStore
      with {begin} as {begin} at {output} and
  inherits VectorRead
      with {begin} as {begin} at {matrix_read} and
  inherits VectorRead
      with {begin} as {begin} at {vector_read} and
  inherits VectorRead
      with {begin} as {begin} at {index_read} and
  {precursor} has control flow to {begin} and
  {precursor} control flow dominates {begin})
End

# These are some buidling blocks for the toplevel constraints.

Constraint ForNest
( inherits For with {iterator[0]} as {iterator} at {for[0]} and
  {begin} is the same as {for[0].begin} and
  {successor} is the same as {for[0].successor} and
  ( inherits For with {iterator[i+1]} as {iterator} at {for[i+1]} and
    {for[i].loop.begin} spans block to {blockend[i]} and
    ( {blockend[i]} is the same as {for[i+1].begin} or
      ( {blockend[i]} has control flow to {for[i+1].begin} and
        {blockend[i]} control flow dominates {for[i+1].begin} and
        {for[i+1].begin} strictly control flow post dominates {blockend[i]})) and
    {for[i+1].successor} spans block to {for[i].loop.end}) for all i=0..N-1)
End

Constraint SameSESE
( {precursor} is the same as {other.precursor} and
  {begin}     is the same as {other.begin} and
  {end}       is the same as {other.end} and
  {successor} is the same as {other.successor})
End

Constraint DotProductLoop
( inherits GeneralDotProduct with {src1} as {src1}
                              and {src2} as {src2} at {loop} and
  ( ( {loop.initial} is load instruction and
      {update_address} has data flow to {loop.initial}) or
    ( {loop.initial} is floating point zero and
      {update_address} is gep instruction)) and
  {old_ind} reaches phi node {raw_final} from {loop.end} and
  {raw_final} reaches phi node {raw_final2} from {exit_break} and
  {final_value} is first argument of {output.store} and
  inherits Addition with {scaled_reduc} as {input}
                     and {final_value}  as {value}
                     and {scaled_prev}  as {addend} and
  inherits Multiplication with {raw_final2}   as {input}
                           and {scaled_reduc} as {value}
                           and {alpha}        as {multiplier} and
  inherits LocalConst with {alpha} as {value} and
  inherits Multiplication with {prev}        as {input}
                           and {scaled_prev} as {value}
                           and {beta}        as {multiplier} and
  ( ( {prev} is unused and
      {update_address} is gep instruction) or
    ( {prev} is load instruction and
      {update_address} is first argument of {prev})) and
  inherits LocalConst with {beta} as {value})
End

Constraint GeneralDotProduct
( inherits For and
  inherits InductionVar and
  {new_ind} is fadd instruction and
  inherits ArgumentsPermuted with {new_ind}  as {dst}
                              and {old_ind}  as {src1}
                              and {dotvalue} as {src2} and
  {dotvalue} is fmul instruction and
  inherits ArgumentsPermuted with {dotvalue} as {dst} and
  {initial} reaches phi node {old_ind} from {precursor})
End

Constraint ReadRange
( ( ( {range_end} is load instruction and
      {range_end} reaches phi node {range_begin} from {end} and
      {iter_begin_read.value} is the same as {iter_end_read.value} and
      {range_end} is the same as {iter_end_read.value} and
      {range_begin} strictly control flow dominates {end}) or
    ( {range_begin} is load instruction and
      {range_end} is load instruction and
      {range_begin} is the same as {iter_begin_read.value} and 
      {range_end} is the same as {iter_end_read.value} and
      {range_begin} strictly control flow dominates {end})) and

  inherits VectorRead with {idx} as {idx}
                       and {begin} as {begin} at {iter_begin_read} and
  inherits VectorRead with {idx} as {idx}
                       and {begin} as {begin} at {iter_end_read})
End

Constraint For
( inherits Loop at {loop} and

  inherits InductionVar with {iterator}  as {old_ind}
                         and {increment} as {new_ind}
                         and {loop.end}  as {end} and
  {increment} has data flow to {comparison} and
  {iterator} is phi instruction and
  {comparison} is icmp instruction and
  {comparison} has data flow to {loop.end} and
  {increment} has data flow to {iterator} and
  {increment} is add instruction and
  {iterator} has data flow to {increment} and
  {iter_end} has data flow to {comparison} and
  inherits LocalConst with {iter_end}   as {value}
                       and {loop.begin} as {begin} and
  {iter_begin} has data flow to {iterator} and
  inherits LocalConst with {iter_begin} as {value}
                       and {loop.begin} as {begin} and
  {iter_step} has data flow to {increment} and
  inherits LocalConst with {iter_step}  as {value}
                       and {loop.begin} as {begin} and

  collect i 1
  ( ( ( {loop.begin} control flow post dominates {loop.precursor} and
        {optional.preheader[i]} spans block to {loop.precursor}) or
      ( {loop.precursor} has control flow to {loop.begin} and
        {optional.preheader[i]} is the same as {loop.begin})) and
    {optional.condjump[i]} has control flow to {optional.preheader[i]} and
    {optional.condjump[i]} strictly control flow dominates {optional.preheader[i]} and
    {optional.condjump[i]} has control flow to {optional.condtarget[i]} and
    {optional.comparison[i]} has data flow to {optional.condjump[i]} and
    {optional.comparison[i]} is icmp instruction and
    {iter_end} has data flow to {optional.comparison[i]} and
    ( ( {optional.condtarget[i]} is the same as {loop.successor} and
        {optional.innerend[i]} is unused) or
      ( {loop.successor} spans block to {optional.innerend[i]} and
        {optional.innerend[i]} has control flow to {optional.condtarget[i]}))) and

  ( ( {optional.condjump[0]} is unused and
      {begin} is the same as {loop.begin}) or
    ( {optional.condjump[0]} is branch instruction and
      {begin} is the same as {optional.condjump[0]} and
      {loop.begin} is instruction)) and
  ( ( {optional.condtarget[0]} is unused and
      {successor} is the same as {loop.successor}) or
    ( {optional.condtarget[0]} is instruction and
      {loop.successor} is instruction and
      {successor} is the same as {optional.condtarget[0]})))
End

Constraint MatrixStore
  inherits PermMultidStore(N=2) with {col} as {input[0]} and {row} as {input[1]}
End

Constraint MatrixRead
  inherits PermMultidRead(N=2) with {col} as {input[0]} and {row} as {input[1]}
End

Constraint VectorStore
  inherits PermMultidStore(N=1) with {idx} as {input[0]}
End

Constraint VectorRead
  inherits PermMultidRead(N=1) with {idx} as {input[0]}
End

Constraint PermMultidStore
( {store} is store instruction and
  {address} is second argument of {store} and
  inherits AffineAccess and
  inherits Permute with {input_index} as {output})
End

Constraint PermMultidRead
( {value} is load instruction and
  {address} is first argument of {value} and
  inherits AffineAccess and
  inherits Permute with {input_index} as {output})
End

Constraint AffineAccess
( {address} is gep instruction and
  {base_pointer} is first argument of {address} and
  inherits LocalConst with {base_pointer} as {value}
                            and {begin}       as {begin} and
  {output_index} is second argument of {address} and
  {offset_add.value} is the same as {output_index} and
  inherits Addition at {offset_add} and
  inherits LocalConst with {offset_add.addend} as {value} and
  ( {stride_mul[N-i-1].value} is the same as {index_add[N-i].input} and
    inherits Multiplication at {stride_mul[N-i-1]} and
    inherits LocalConst with {stride_mul[N-i-1].multiplier} as {value} and
    {index_add[N-i-1].value} is the same as {stride_mul[N-i-1].input} and
    inherits Addition at {index_add[N-i-1]} and
    {input_index[N-i-1]} is the same as {add_input[N-i-1]} and
    ( ( {add_input[N-i-1]} is not the same as {input_index[N-i]} and
        {input_index[N-i-1]} is an integer) or
      ( {input_index[N-i-1]} is the same as {add_input[N-i-1]} and
        {input_index[N-i]} is an integer))) for all i=0..N
                                           with {offset_add.input} as {index_add[N].input}
                                            and {offset_add.value} as {input_index[N]}
                                            and {index_add[0].input}  as {add_input[0]}
                                            and {index_add[1].addend} as {add_input[1]}
                                            and {index_add[2].addend} as {add_input[2]}
                                            and {index_add[3].addend} as {add_input[3]} and
  {base_index} is the same as {index_add[0].addend} and
  inherits LocalConst with {base_index} as {value})
End

Constraint Addition
( ( {input} is the same as {value} and
    {addend} is unused) or
  ( ( {value} is add instruction or
      {value} is fadd instruction) and
    inherits ArgumentsPermuted with {value}  as {dst}
                                and {input}  as {src1}
                                and {addend} as {src2}) or
  ( ( {value} is sub instruction or
      {value} is fsub instruction) and
    inherits ArgumentsPermuted with {value}  as {dst}
                                and {input}  as {src1}
                                and {addend} as {src2}))
End

Constraint Multiplication
( ( {input} is the same as {value} and
    {multiplier} is unused) or
  ( ( {value} is mul instruction or
      {value} is fmul instruction) and
    inherits ArgumentsPermuted with {value}      as {dst}
                                and {input}      as {src1}
                                and {multiplier} as {src2}) or
  ( {value} is fdiv instruction and
    inherits ArgumentsPermuted with {value} as {dst}
                                and {input} as {src1}
                                and {multiplier} as {src2}))
End

Constraint Permute
if M+1=N then
  {input[M]} is the same as {output[M]}
else
  ( {input[M]} is the same as {output[n]} and
    inherits Permute(N=N,M=M+1) with {output[M]} as {output[n]}
                                and {output[n]} as {output[M]}) for some n=M..N
endif
for M=0 if not otherwise specified
End

Constraint Concat
( if N1=1 then
    {out[0]} is the same as {in1}
  else
    {out[i]} is the same as {in1[i]} for all i=0..N1
  endif and
  if N2=1 then
    {out[N1+0]} is the same as {in2}
  else
    {out[N1+i]} is the same as {in2[i]} for all i=0..N1
  endif and
  if N3=1 then
    {out[N1+N2+0]} is the same as {in3}
  else
    {out[N1+N2+i]} is the same as {in3[i]} for all i=0..N3
  endif)
for N2=0 if not otherwise specified
for N3=0 if not otherwise specified
End

# This is for preprocessing.

Constraint Distributive
( {value} is add instruction and
  {sum1.value} is first argument of {value} and
  {sum2.value} is second argument of {value} and
  inherits SumChain at {sum1} and
  {product1.value} is the same as {sum1.last_factor} and
  inherits MulChain at {product1} and
  {product1.last_factor} is the same as {product2.last_factor} and
  inherits SumChain at {sum2} and
  {product2.value} is the same as {sum2.last_factor} and
  inherits MulChain at {product2})
End

Constraint SumChain
( {value} is an integer and
  {value} is the same as {results[0]} and
  ( ( {results[i]} is add instruction and
      inherits ArgumentsPermuted with {results[i]}   as {dst}
                                  and {results[i+1]} as {src1}
                                  and {factors[i]}   as {src2} and
      {last_factor} is an integer) or
    ( ( ( {results[i]} is an integer and
          {last_factor} is the same as {factors[i]}) or
        ( {results[i]} is unused and
          {factors[i]} is unused and
          {last_factor} is an integer)) and
      {results[i]} is the same as {factors[i]} and
      {results[i+1]} is unused)) for all i=0..N and
  {factors[N]} is unused)
for N=4 if not otherwise specified
End

Constraint MulChain
( {value} is an integer and
  {value} is the same as {results[0]} and
  ( ( {results[i]} is mul instruction and
      inherits ArgumentsPermuted with {results[i]}   as {dst}
                                  and {results[i+1]} as {src1}
                                  and {factors[i]}   as {src2} and
      {last_factor} is an integer) or
    ( ( ( {results[i]} is an integer and
          {last_factor} is the same as {factors[i]}) or
        ( {results[i]} is unused and
          {factors[i]} is unused and
          {last_factor} is an integer)) and
      {results[i]} is the same as {factors[i]} and
      {results[i+1]} is unused)) for all i=0..N and
  {factors[N]} is unused)
for N=4 if not otherwise specified
End

Constraint ArgumentsPermuted
( ( {src1} is first  argument of {dst} and
    {src2} is second argument of {dst}) or
  ( {src2} is first  argument of {dst} and
    {src1} is second argument of {dst}))
End

Constraint HoistSelect
( {select} is select instruction and
  {input1} is second argument of {select} and
  {base} is first argument of {input1} and
  {input2} is third argument of {select} and
  {base} is first argument of {input2} and
  {input1} is gep instruction and
  {input2} is gep instruction)
End

Constraint ForWithIteratorTest
( inherits Loop and
  {comparison} has data flow to {end} and
  {comparison} is icmp instruction and
  {iterator} has data flow to {comparison} and
  inherits InductionVar with {iterator}  as {old_ind}
                         and {increment} as {new_ind} and
  {increment} has data flow to {iterator} and
  {increment} is add instruction and
  {iterator} has data flow to {increment} and
  {iter_end} has data flow to {comparison} and
  inherits LocalConst with {iter_end} as {value}
                       and {begin}    as {begin} and
  {iter_begin} has data flow to {iterator} and
  inherits LocalConst with {iter_begin} as {value}
                       and {begin}      as {begin} and
  {iter_step} has data flow to {increment} and
  inherits LocalConst with {iter_step} as {value}
                       and {begin}     as {begin})
End

Constraint Loop
( inherits SESE and
  {body.begin} is the same as {begin} and
  {body.end} is the same as {end} and
  {body.precursor} is the same as {precursor} and
  {body.successor} is the same as {successor} and
  {end} has control flow to {begin})
End

Constraint InductionVar
{new_ind} reaches phi node {old_ind} from {end}
End

Constraint LocalConst
( ( {begin} is instruction and
    {value} is preexecution) or
  {value} strictly control flow dominates {begin} or
  ( {begin} is instruction and
    {value} is unused))
End

Constraint SESE
( {precursor} is branch instruction and
  {precursor} has control flow to {begin} and
  {end} is branch instruction and
  {end} has control flow to {successor} and
  {begin} control flow dominates {end} and
  {end} control flow post dominates {begin} and
  {precursor} strictly control flow dominates {begin} and
  {successor} strictly control flow post dominates {end} and
  all control flow from {begin} to {precursor} passes through {end} and
  all control flow from {successor} to {end} passes through {begin})
End
